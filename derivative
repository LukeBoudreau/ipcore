library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.numeric_std.all;
use IEEE.std_logic_unsigned.all;

-- This module computes the maximum derivative for a specific pixel (1,1),
-- [0,0][0,1][0,2]
-- [1,0][1,1][1,2]
-- [2,0][2,1][2,2]
-- input is the all the rows concatenated together

entity derivative is
port (
    input : in std_logic_vector(71 downto 0); -- 3x3 convolution table
    output : out std_logic -- Output with max value
);
end entity;

architecture structural of derivative is
Component 10bitAdder is
    Port(
        A : in STD_LOGIC_VECTOR(9 downto 0);
        B : in STD_LOGIC_VECTOR(9 downto 0);
        Y : out STD_LOGIC_VECTOR(9 downto 0)
    );
end Component;

signal NE_SW: std_logic_vector(9 downto 0);
signal N_S  : std_logic_vector(9 downto 0);
signal E_W  : std_logic_vector(9 downto 0);
signal NW_SE: std_logic_vector(9 downto 0);

begin
    -- This process computes the derivatives in 4 directions
    process(input)
        NE_SW <= 10bitAdder();
    end process;
end;
